$date
	Fri Oct 14 18:12:32 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 8 ! alu_o [7:0] $end
$var reg 8 " data_a_i [7:0] $end
$var reg 8 # data_b_i [7:0] $end
$var reg 3 $ op_i [2:0] $end
$scope module alu1 $end
$var wire 8 % data_a_i [7:0] $end
$var wire 8 & data_b_i [7:0] $end
$var wire 3 ' op_i [2:0] $end
$var parameter 3 ( ADD $end
$var parameter 3 ) AND $end
$var parameter 3 * EQL $end
$var parameter 3 + LSR $end
$var parameter 3 , OR $end
$var parameter 3 - SLL $end
$var parameter 3 . SUB $end
$var parameter 3 / XOR $end
$var reg 8 0 alu_o [7:0] $end
$scope begin ALU_logic $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 1 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 /
b1 .
b10 -
b101 ,
b11 +
b111 *
b100 )
b0 (
$end
#0
$dumpvars
b0 1
b11010010 0
b0 '
b1000000 &
b10010010 %
b0 $
b1000000 #
b10010010 "
b11010010 !
$end
#1
b10110111 !
b10110111 0
b110 $
b110 '
b10000110 #
b10000110 &
b110001 "
b110001 %
b1 1
#2
b0 !
b0 0
b100 $
b100 '
b1001 #
b1001 &
b110010 "
b110010 %
b10 1
#3
b10000010 !
b10000010 0
b10111011 #
b10111011 &
b10000110 "
b10000110 %
b11 1
#4
b0 !
b0 0
b111 $
b111 '
b11000110 #
b11000110 &
b11110110 "
b11110110 %
b100 1
#5
b10001100 !
b10001100 0
b10 $
b10 '
b1100010 #
b1100010 &
b1100011 "
b1100011 %
b101 1
#6
b101101 !
b101101 0
b0 $
b0 '
b111011 #
b111011 &
b11110010 "
b11110010 %
b110 1
#7
b1100011 !
b1100011 0
b11 $
b11 '
b11111001 #
b11111001 &
b11000111 "
b11000111 %
b111 1
#8
b1110110 !
b1110110 0
b101 $
b101 '
b1100010 #
b1100010 &
b1110100 "
b1110100 %
b1000 1
#9
b1001000 !
b1001000 0
b1 $
b1 '
b10110 #
b10110 &
b1011110 "
b1011110 %
b1001 1
#10
b1010 1
